/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.PraktikumPBOL.GUIPerpustakaan;

import javax.swing.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author Markus
 */
public class LayerPeminjam extends javax.swing.JDialog {

    /**
     * Creates new form LayerPeminjam
     */
    public LayerPeminjam(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        ulangiButton = new javax.swing.JButton();
        simpanButton = new javax.swing.JButton();
        nomorIndukTextField = new javax.swing.JTextField();
        typePersonDropDown = new javax.swing.JComboBox<>();
        nomorIndukLabel = new javax.swing.JLabel();
        alamatTextField = new javax.swing.JTextField();
        namaTextField = new javax.swing.JTextField();
        namaLabel = new javax.swing.JLabel();
        alamatLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        kembaliButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        pinjamTextField = new javax.swing.JLabel();
        pinjamSpinner = new javax.swing.JSpinner();
        idTextField = new javax.swing.JTextField();
        idLabel = new javax.swing.JLabel();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {"Item 1", "Item 2", "Item 3", "Item 4", "Item 5"};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane1.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        ulangiButton.setText("Ulangi");
        ulangiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ulangiButtonActionPerformed(evt);
            }
        });

        simpanButton.setText("Simpan");
        simpanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanButtonActionPerformed(evt);
            }
        });

        nomorIndukTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomorIndukTextFieldActionPerformed(evt);
            }
        });

        typePersonDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Mahasiswa (NIM)", "Dosen (NIP)", "Umum (NIK)", " "}));
        typePersonDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typePersonDropDownActionPerformed(evt);
            }
        });

        nomorIndukLabel.setText("NIM");

        alamatTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alamatTextFieldActionPerformed(evt);
            }
        });

        namaTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaTextFieldActionPerformed(evt);
            }
        });

        namaLabel.setText("Nama");

        alamatLabel.setText("Alamat");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel1.setText("PEMINJAM");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        kembaliButton.setBackground(new java.awt.Color(255, 255, 255));
        kembaliButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        kembaliButton.setText("Kembali");
        kembaliButton.setBorder(null);
        kembaliButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kembaliButtonActionPerformed(evt);
            }
        });

        exitButton.setText("X");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        pinjamTextField.setText("Pinjam");

        pinjamSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));

        idTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTextFieldActionPerformed(evt);
            }
        });

        idLabel.setText("ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(242, 242, 242)
                                                .addComponent(jLabel1))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addComponent(kembaliButton)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(alamatLabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(alamatTextField))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(idLabel)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(namaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(namaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(70, 70, 70)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(nomorIndukLabel)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(nomorIndukTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(typePersonDropDown, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(40, 40, 40))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(ulangiButton)
                                                .addGap(18, 18, 18)
                                                .addComponent(simpanButton)
                                                .addGap(44, 44, 44))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(pinjamTextField)
                                                .addGap(18, 18, 18)
                                                .addComponent(pinjamSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(183, 183, 183))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(kembaliButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel1))
                                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(132, 132, 132)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(namaLabel)
                                        .addComponent(namaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(typePersonDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(nomorIndukTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(nomorIndukLabel)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(idLabel)
                                                .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(pinjamTextField)
                                        .addComponent(pinjamSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(alamatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(alamatLabel)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(ulangiButton)
                                        .addComponent(simpanButton))
                                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void idTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idTextFieldActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {
        dispose(); //Menghapus Dialog
    }

    //menjalankan program ketika tombol ulangi dipencet
    private void ulangiButtonActionPerformed(java.awt.event.ActionEvent evt) {

        //membuat karakter yang sudah diinput kembali ke kosong
        namaTextField.setText("");
        idTextField.setText("");
        alamatTextField.setText("");
        nomorIndukTextField.setText("");
    }

    //menjalankan program saat tombol simpan di tekan
    private void simpanButtonActionPerformed(java.awt.event.ActionEvent evt) {

        // nilai harus true semua agar JOptanePane ditampilkan
        if ((isNamaNotContainDigit() &&
                isIdPeminjamStartWithLetter() &&
                isNomorIndukHaveCorectLength()) && isMaxPinjamValid()) {

            /**
             * menampilkan pesan dialog dengan JOptanePane, berisi String, nilai diambil dari inputText
             */
            JOptionPane.showMessageDialog(this,
                    "Nama: " + namaTextField.getText() +
                            "\nID: " + idTextField.getText() +
                            "\nAlamat: " + alamatTextField.getText() +
                            "\nTipe Peminjam: " + typePersonDropDown.getModel().getSelectedItem() +
                            "\n" + nomorIndukLabel.getText() + ": " + nomorIndukTextField.getText() +
                            "\nBanyak Pinjam: " + pinjamSpinner.getValue());
        }
    }

    private void nomorIndukTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    //menjalankan program ketika item pada drop down dipilih
    private void typePersonDropDownActionPerformed(java.awt.event.ActionEvent evt) {

        //menjalankan program ketika item pada drop down dipilih, dimabil nilai sesuai index
        switch (typePersonDropDown.getSelectedIndex()) {
            case 0:
                nomorIndukLabel.setText("NIM"); //mengubah text pada label
                break;
            case 1:
                nomorIndukLabel.setText("NIP"); //mengubah text pada label
                break;
            case 2:
                nomorIndukLabel.setText("NIK"); //mengubah text pada label
                break;
        }
    }

    private void alamatTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void namaTextFieldActionPerformed(java.awt.event.ActionEvent evt) {

    }

    /**
     *
     * @return true, ketika matcher tidak menemukan
     */
    private boolean isNamaNotContainDigit() {

        //membuat pattern regex, dimasukkan lewat parameter
        Pattern pattern = Pattern.compile("^[0-9]*$");

        //mencari kesamaan pattern dengan nilai paramter
        Matcher matcher = pattern.matcher(namaTextField.getText());
        try { //Ekspresi try
            if (!matcher.find()) {                      //ketika matcher tidak menemnukan
                return true;
            } else {                                    //jika selain benar
                throw new Exception();                  //melempar Exception baru
            }
        } catch (Exception e) {                         //menangkap Exception
            JOptionPane.showMessageDialog(this,     //Menampilkan pesan dalam bentuk JOptanePane
                    "Nama Tidak Boleh Mengandung Angka");
        }
        return false; //Return false, berarti nilai true tidak tercapai
    }

    private void kembaliButtonActionPerformed(java.awt.event.ActionEvent evt) {
        this.setVisible(false); //saat tombol ditekan, tampilan kelas ini tidak terlihat
    }

    /**
     * @return true, ketika pinjam kurang dari sama dengan nilai maxPinjam, tergantung indeks
     */
    private boolean isMaxPinjamValid() {
        Integer pinjam = (Integer) pinjamSpinner.getValue();            //casting value pinnjamSpinner dari Object ke Integer
        int choosenDropdown = typePersonDropDown.getSelectedIndex();
        int[] maxPinjam = {5, 7, 3};
        String[] catchMessage = {"Mahasiswa", "Dosen", "Umum"};

        try { //ekspresi try

            //Dijalankan ketika nilai pinjam kurang dari sama dengan maxPinjam array ke choosenDropdown
            if (pinjam <= maxPinjam[choosenDropdown]) {
                return true;
            } else {                                    //Jika selain benar
                throw new Exception();                  //Melempar Exception baru
            }
        } catch (Exception e) {                         //Menangkap Exception
            JOptionPane.showMessageDialog(this,     //Menampilkan pesan dalam bentuk JOptanePane
                    catchMessage[choosenDropdown] +
                            " Maksimal Hanya dapat pinjam " +
                            maxPinjam[choosenDropdown]);
        }
        return false; //Return false, berarti nilai true tidak tercapai
    }

    /**
     *
     * @return true, ketika huruf pertama dalam idTextField sesuai dengan nilai tipePeminjam, tergantung indeks
     */
    private boolean isIdPeminjamStartWithLetter() {
        String[] tipePeminjam = {"^M", "^D", "^U"};
        String[] catchMessage = {"Mahasiswa", "Dosen", "Umum"};
        int choosenDropdown = typePersonDropDown.getSelectedIndex();
        String showMessage = catchMessage[choosenDropdown];

        //membuat pattern regex, dimasukkan lewat parameter
        //Patterm.CASE_INSENSITIVE, agar nilai yang akan dibandingkan tidak peduli KAPITAL
        Pattern pattern = Pattern.compile(tipePeminjam[choosenDropdown], Pattern.CASE_INSENSITIVE);

        //mencari kesamaan pattern dengan nilai paramter
        Matcher matcher = pattern.matcher(idTextField.getText());

        try { //ekspresi try
            if (matcher.find()){                        //jika matcher menemukan kesamaan
                return true;
            } else {                                    //jika selain benar
                throw new Exception();                  //melempar Exception baru
            }
        } catch (Exception e) {                         //menangkap Exception
            JOptionPane.showMessageDialog(this,     //menampilkan pesan dalam bentuk JOPtanePane
                    "ID " + showMessage + " dimulai dengan " +
                            showMessage.charAt(0));
        }
        return false; //Return false, berarti nilai true tidak tercapai
    }

    private boolean isNomorIndukHaveCorectLength() {
        int[] initialCharacter = {9, 18, 16};
        String[] catchMessage = {"NIM", "NIP", "NIK"};
        int choosenDropdown = typePersonDropDown.getSelectedIndex();

        //membuat pattern regex, dimasukkan lewat parameter
        Pattern pattern = Pattern.compile("^[0-9]*$");

        //mencari kesamaan pattern dengan nilai paramter
        Matcher matcher = pattern.matcher(nomorIndukTextField.getText());

        try { //Ekspresi try

            //Jika matcher menemukan kesamaan dan panjang text nomorIndukTextField sesuai dengan nilai initialCharacter,
            //tergantung indeks
            if (matcher.find() && nomorIndukTextField.getText().length() ==
                    initialCharacter[choosenDropdown]) {
                return true;
            } else {                                    //jika selain benar
                throw new Exception();                  //Melempar Exception baru
            }
        } catch (Exception e) {                         //Menangkap Exception
            JOptionPane.showMessageDialog(this,     //Menampilkan pesan dalam bentuk JOptanePane
                    catchMessage[choosenDropdown] + " Harus " +
                            initialCharacter[choosenDropdown] + " Digit Angka");
        }
        return false; //Return false, berarti nilai true tidak terapat
    }

//    private boolean isIdPeminjamStartWithLetter() {
//        switch (typePersonDropDown.getSelectedIndex()) {
//            case 0:
//                Pattern pattern = Pattern.compile("^M", Pattern.CASE_INSENSITIVE);
//                Matcher matcher = pattern.matcher(idTextField.getText());
//                try {
//                    if (matcher.find()) {
//                        return true;
//                    } else {
//                        throw new Exception();
//                    }
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(this,
//                            "ID Mahasiswa dimulai dengan M");
//                    return false;
//                }
//            case 1:
//                pattern = Pattern.compile("^D", Pattern.CASE_INSENSITIVE);
//                matcher = pattern.matcher(idTextField.getText());
//                try {
//                    if (matcher.find()) {
//                        return true;
//                    } else {
//                        throw new Exception();
//                    }
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(this,
//                            "ID Dosen dimulai dengan D");
//                    return false;
//                }
//            case 2:
//                pattern = Pattern.compile("^U", Pattern.CASE_INSENSITIVE);
//                matcher = pattern.matcher(idTextField.getText());
//                try {
//                    if (matcher.find()) {
//                        return true;
//                    } else {
//                        throw new Exception();
//                    }
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(this,
//                            "ID Umum dimulai dengan U");
//                    return false;
//                }
//        }
//        return false;
//    }

//    private boolean isNomorIndukCorrect() {
//        Pattern pattern = Pattern.compile("\\d");
//        Matcher matcher = pattern.matcher(nomorIndukTextField.getText());
//        switch (typePersonDropDown.getSelectedIndex()) {
//            case 0:
//                try {
//                    if (matcher.find() && nomorIndukTextField.getText().length() == 9) {
//                        return true;
//                    } else {
//                        throw new Exception();
//                    }
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(this,
//                            "NIM Harus 9 Digit Angka");
//                }
//                break;
//            case 1:
//                try {
//                    if (matcher.find() && nomorIndukTextField.getText().length() == 18) {
//                        return true;
//                    } else {
//                        throw new Exception();
//                    }
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(this,
//                            "NIP Harus 18 Digit Angka");
//                }
//                break;
//            case 2:
//                try {
//                    if (matcher.find() && nomorIndukTextField.getText().length() == 16) {
//                        return true;
//                    } else {
//                        throw new Exception();
//                    }
//                } catch (Exception e) {
//                    JOptionPane.showMessageDialog(this,
//                            "NIK Harus 16 Digit Angka");
//                }
//                break;
//        }
//        return false;
//    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LayerPeminjam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LayerPeminjam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LayerPeminjam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LayerPeminjam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LayerPeminjam dialog = new LayerPeminjam(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alamatLabel;
    private javax.swing.JTextField alamatTextField;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton kembaliButton;
    private javax.swing.JLabel namaLabel;
    private javax.swing.JTextField namaTextField;
    private javax.swing.JLabel nomorIndukLabel;
    private javax.swing.JTextField nomorIndukTextField;
    private javax.swing.JSpinner pinjamSpinner;
    private javax.swing.JLabel pinjamTextField;
    private javax.swing.JButton simpanButton;
    private javax.swing.JComboBox<String> typePersonDropDown;
    private javax.swing.JButton ulangiButton;
    // End of variables declaration//GEN-END:variables
}

